// Simple Demo Block Cipher: 
// x: Plaintext
// y: Ciphertext
// k: Key
// y[i] = x[i] + y[i];
LIB "block_cipher.lib";
ring r = (2,A),(
y_0,y_1,y_2,y_3,
x_0,x_1,x_2,x_3,
a_0,a_1,a_2,a_3,
b_0,b_1,b_2,b_3,
c_0,c_1,c_2,c_3,
d_0,d_1,d_2,d_3,
e_0,e_1,e_2,e_3,
k_0,k_1,k_2,k_3
),lp;
minpoly = A8+A4+A3+A+1;

// System
// 1. Key Addition: a[i] = x[i] + k[i]
poly f1 = a_0 + x_0 + k_0;
poly f2 = a_1 + x_1 + k_1;
poly f3 = a_2 + x_2 + k_2;
poly f4 = a_3 + x_3 + k_3;

// 2. S-Box (inversion): a[i]b[i] = 1
poly f5 = a_0*b_0 + 1;
poly f6 = a_1*b_1 + 1;
poly f7 = a_2*b_2 + 1;
poly f8 = a_3*b_3 + 1;

// 3. Mixing Layer: c[i] = sum(b[!i])
poly f9 = c_0 + b_1 + b_2 + b_3;
poly f10 = c_1 + b_0 + b_2 + b_3;
poly f11 = c_2 + b_0 + b_1 + b_3;
poly f12 = c_3 + b_0 + b_1 + b_2;

// 4. 2nd Key Addition: d[i] = c[i] + k[i]
poly f13 = d_0 + c_0 + k_0;
poly f14 = d_1 + c_1 + k_1;
poly f15 = d_2 + c_2 + k_2;
poly f16 = d_3 + c_3 + k_3;

// 5. 2nd S-box (inversion): d[i]e[i] = 1
poly f17 = d_0*e_0 + 1;
poly f18 = d_1*e_1 + 1;
poly f19 = d_2*e_2 + 1;
poly f20 = d_3*e_3 + 1;

// 6. 3rd Key Addition: y[i] = e[i] + k[i]
poly f21 = y_0 + e_0 + k_0;
poly f22 = y_1 + e_1 + k_1;
poly f23 = y_2 + e_2 + k_2;
poly f24 = y_3 + e_3 + k_3;

// Plaintext = TODD
system("sh","./convert plaintext x plain.txt TODD");
string s_plain = read("plain.txt");
execute(s_plain);
list plain_text = x0-x_0,x1-x_1,x2-x_2,x3-x_3;

// Key = KEY!
system("sh","./convert key k key.txt KEY!");
string s_key = read("key.txt");
execute(s_key);
list key_bytes = k0-k_0,k1-k_1,k2-k_2,k3-k_3;

// Ciphertext:0x9f,0x94,0x9d,0x65
list cipher_text = block_cipher(plain_text,key_bytes);

// Define Ciphertext
poly y0 = y_0 + cipher_text[1];
poly y1 = y_1 + cipher_text[2];
poly y2 = y_2 + cipher_text[3];
poly y3 = y_3 + cipher_text[4];

// Vanishing Polynomials
poly k0_v = k_0^256-k_0;
poly k1_v = k_1^256-k_1;
poly k2_v = k_2^256-k_2;
poly k3_v = k_3^256-k_3;
// add for all primary inputs
poly y0_v = y_0^256-y_0;
poly y1_v = y_1^256-y_1;
poly y2_v = y_2^256-y_2;
poly y3_v = y_3^256-y_3;
poly x0_v = x_0^256-x_0;
poly x1_v = x_1^256-x_1;
poly x2_v = x_2^256-x_2;
poly x3_v = x_3^256-x_3;

ideal J0 = k0_v,k1_v,k2_v,k3_v;

ideal J = 
f1,f2,f3,f4,
f5,f6,f7,f8,
f9,f10,f11,f12,
f13,f14,f15,f16,
f17,f18,f19,f20,
f21,f22,f23,f24,
x0,x1,x2,x3,
y0,y1,y2,y3;

//option(redSB);
//ideal G = slimgb(J+J0);

